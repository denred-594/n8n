{
  "name": "Remi 1.1 - SendFormular",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "id"
            },
            {
              "name": "formular"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        340,
        120
      ],
      "id": "7de682ac-93ea-4e26-8389-480aba761b28",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE OR REPLACE FUNCTION get_decrypted_values(input_table_name TEXT, record_id TEXT)\nRETURNS JSONB AS $$\nDECLARE\n    col_name TEXT;\n    col_type TEXT;\n    sql_query TEXT := 'SELECT id'; -- Start der SQL-Abfrage mit der ID\n    decrypted_data JSONB := '{}'::JSONB;  -- Leere JSON-Struktur\n    result RECORD;\nBEGIN\n    -- Alle Spaltennamen der Tabelle abrufen, außer 'id' und nur 'text' Spalten auswählen\n    FOR col_name, col_type IN \n        SELECT column_name, data_type\n        FROM information_schema.columns \n        WHERE table_name = input_table_name AND column_name <> 'id'\n    LOOP\n        -- Nur Spalten vom Typ 'text' für die Entschlüsselung einbeziehen\n        IF col_type = 'text' THEN\n            -- Dynamische SQL-Abfrage für jede Spalte hinzufügen\n            sql_query := sql_query || \n                ', pgp_sym_decrypt(' || quote_ident(col_name) || '::bytea, ''DennyUndLevinWerdenReich'') AS ' || quote_ident('decrypted_' || col_name); -- Benenne die entschlüsselten Spalten um\n        ELSE\n            -- Andernfalls füge die Spalte ohne Entschlüsselung hinzu\n            sql_query := sql_query || \n                ', ' || quote_ident(col_name);\n        END IF;\n    END LOOP;\n    \n    -- FROM-Klausel hinzufügen und Abfrage für die spezifische ID erweitern\n    sql_query := sql_query || ' FROM ' || quote_ident(input_table_name) || ' WHERE id = ' || quote_literal(record_id);\n    \n    -- Dynamische SQL-Abfrage ausführen und das Ergebnis in die result-Variable einfügen\n    EXECUTE sql_query INTO result;\n    \n    -- Jetzt result in JSONB umwandeln\n    decrypted_data := to_jsonb(result);\n    \n    -- Rückgabe der entschlüsselten Daten als JSONB\n    RETURN decrypted_data;\nEND;\n$$ LANGUAGE plpgsql;\n\n\nSELECT * FROM get_decrypted_values('{{ $json.formular }}', '{{ $json.id }}');\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        640,
        120
      ],
      "id": "4c026945-3da5-4153-8bdf-1b4cd498ae14",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "6SqxrvWZi2YWF4Hw",
          "name": "neondb_owner Remi 1.0"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM {{ $('When Executed by Another Workflow').first().json.formular }}\nWHERE id = '{{ $('When Executed by Another Workflow').first().json.id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1660,
        120
      ],
      "id": "b82618e0-56e4-4f0a-9c09-9a3e81d777c4",
      "name": "Delete Data from {table}",
      "credentials": {
        "postgres": {
          "id": "6SqxrvWZi2YWF4Hw",
          "name": "neondb_owner Remi 1.0"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_chat_histories",
          "mode": "list",
          "cachedResultName": "n8n_chat_histories"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "session_id",
              "value": "={{ $('When Executed by Another Workflow').first().json.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1940,
        120
      ],
      "id": "15ebdb75-722f-4d9e-832d-fa44e7d86064",
      "name": "Delete from Chathistory",
      "credentials": {
        "postgres": {
          "id": "6SqxrvWZi2YWF4Hw",
          "name": "neondb_owner Remi 1.0"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "mothertable",
          "mode": "list",
          "cachedResultName": "mothertable"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $('When Executed by Another Workflow').first().json.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2180,
        120
      ],
      "id": "fcedd56a-96e6-4bda-8c79-fd9b81b41f44",
      "name": "delete from Mothertable",
      "credentials": {
        "postgres": {
          "id": "6SqxrvWZi2YWF4Hw",
          "name": "neondb_owner Remi 1.0"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Überschrift\nconst headline = 'Gewerbe-Anmeldung';\n\n// Beispiel: Abfrage der Eingabedaten (Stelle sicher, dass die Eingabedaten existieren)\nconst rechtsform = $input.first().json.rechtsform || \"Keine Daten vorhanden\";\nconst handelsregister = $input.first().json.handelsregister || \"Keine Daten vorhanden\";\nconst geschaeftsname = $input.first().json.geschaeftsname || \"Keine Daten vorhanden\";\nconst familienname = $input.first().json.familienname || \"Müller\";\nconst vorname = $input.first().json.vorname || \"Anna\";\nconst geschlecht = $input.first().json.geschlecht || \"Weiblich\";\nconst geburtsname = $input.first().json.geburtsname || \"Schmidt\";\nconst geburtsdatum = $input.first().json.geburtsdatum || \"1985-03-15\";\nconst geburtsortundland = $input.first().json.geburtsortundland || \"Berlin, Deutschland\";\nconst anschriftwohnung = $input.first().json.anschriftwohnung || \"Musterstraße 12, 10115 Berlin\";\nconst wohnungtel = $input.first().json.wohnungtel || \"+49301234567\";\nconst wohnungfax = $input.first().json.wohnungfax || \"+49301234568\";\nconst wohnungmail = $input.first().json.wohnungmail || \"anna.mueller@example.com\";\nconst wohnunginternet = $input.first().json.wohnunginternet || \"www.anna-mueller.de\";\nconst zahlgesellschaftler = $input.first().json.zahlgesellschaftler || \"2\";\nconst zahlgesetzvertreter = $input.first().json.zahlgesetzvertreter || \"1\";\nconst beteiligungoefenthand = $input.first().json.beteiligungoefenthand || \"Nein\";\nconst vertrbereperson = $input.first().json.vertrbereperson || \"Hans Müller\";\nconst betriebsstaette = $input.first().json.betriebsstaette || \"Industriestraße 5, 10117 Berlin\";\nconst betriebsstaettetel = $input.first().json.betriebsstaettetel || \"+49309876543\";\nconst betriebsstaettefax = $input.first().json.betriebsstaettefax || \"+49309876544\";\nconst betriebsstaettemail = $input.first().json.betriebsstaettemail || \"info@mueller-gmbh.de\";\nconst betriebsstaetteinternet = $input.first().json.betriebsstaetteinternet || \"www.mueller-gmbh.de\";\nconst hauptniederlassung = $input.first().json.hauptniederlassung || \"Hauptstraße 1, 80331 München\";\nconst hauptniederlassungtel = $input.first().json.hauptniederlassungtel || \"+49891234567\";\nconst hauptniederlassungfax = $input.first().json.hauptniederlassungfax || \"+49891234568\";\nconst hauptniederlassungmail = $input.first().json.hauptniederlassungmail || \"munchen@mueller-gmbh.de\";\nconst hauptniederlassunginternet = $input.first().json.hauptniederlassunginternet || \"www.mueller-gmbh.de/muenchen\";\nconst früherebetriebsstaette = $input.first().json.früherebetriebsstaette || \"Alte Straße 10, 50667 Köln\";\nconst früherebetriebsstaettetel = $input.first().json.früherebetriebsstaettetel || \"+492211234567\";\nconst früherebetriebsstaettefax = $input.first().json.früherebetriebsstaettefax || \"+492211234568\";\nconst früherebetriebsstaettemail = $input.first().json.früherebetriebsstaettemail || \"koeln@mueller-gmbh.de\";\nconst früherebetriebsstaetteinternet = $input.first().json.früherebetriebsstaetteinternet || \"www.mueller-gmbh.de/koeln\";\nconst beschreibungtaetigkeit = $input.first().json.beschreibungtaetigkeit || \"Herstellung und Vertrieb von Möbeln\";\nconst nebengewerbe = $input.first().json.nebengewerbe || \"Nein\";\nconst datumbegintaetigkeit = $input.first().json.datumbegintaetigkeit || \"2023-01-01\";\nconst artbetrieb = $input.first().json.artbetrieb || \"Handwerk\";\nconst zahlgeschführpersonvoll = $input.first().json.zahlgeschführpersonvoll || \"1\";\nconst zahlgeschführpersonteil = $input.first().json.zahlgeschführpersonteil || \"1\";\nconst anmerstfür = $input.first().json.anmerstfür || \"Natürliche Person\";\nconst grundneueinübern = $input.first().json.grundneueinübern || \"Neugründung\";\nconst namefrühgewerb = $input.first().json.namefrühgewerb || \"Müller Einzelhandel\";\nconst bishgesetunfallversich = $input.first().json.bishgesetunfallversich || \"BG Bau\";\nconst bishmitglnum = $input.first().json.bishmitglnum || \"123456789\";\nconst erlaubnis = $input.first().json.erlaubnis || \"Nein\";\nconst handwerkskarte = $input.first().json.handwerkskarte || \"Nein\";\nconst aufenthaltstitel = $input.first().json.aufenthaltstitel || \"Nein\";\nconst entauftitelauflbesch = $input.first().json.entauftitelauflbesch || \"Keine Auflagen\";\nconst datum = $input.first().json.datum || \"2025-04-03\";\nconst unterschrift = $input.first().json.unterschrift || \"Anna Müller (digital signiert)\";\n\n// Die inputData mit den Feldern und Labels erstellen\nconst inputData = {\n    \"fields\": [\n        { \"field\": \"rechtsform\", \"label\": \"1 Im Handels-, Genossenschafts- oder Vereinsregister, ggf. im Stiftungsverzeichnis eingetragener Name mit Rechtsform (bei GbR: Angabe der weiteren Gesellschafter)\", \"entry\": rechtsform },\n        { \"field\": \"handelsregister\", \"label\": \"2 Ort und Nummer des Eintrages im Handels-, Genossenschafts- oder Vereinsregister, ggf. Nummer im Stiftungsverzeichnis\", \"entry\": handelsregister },\n        { \"field\": \"geschaeftsname\", \"label\": \"3 Name des Geschäfts, wenn er vom eingetragenen Namen in Feld 1 abweicht (Geschäftsbezeichnung; z. B. Gaststätte zum grünen Baum)\", \"entry\": geschaeftsname },\n        { \"field\": \"familienname\", \"label\": \"4 Name\", \"entry\": familienname },\n        { \"field\": \"vorname\", \"label\": \"5 Vornamen\", \"entry\": vorname },\n        { \"field\": \"geschlecht\", \"label\": \"6 Geschlecht (Angabe ist entsprechend der Eintragung in der Geburtsurkunde zu machen)\", \"entry\": geschlecht },\n        { \"field\": \"geburtsname\", \"label\": \"7 Geburtsname (nur bei Abweichung vom Namen)\", \"entry\": geburtsname },\n        { \"field\": \"geburtsdatum\", \"label\": \"8 Geburtsdatum\", \"entry\": geburtsdatum },\n        { \"field\": \"geburtsortundland\", \"label\": \"Geburtsort und -land\", \"entry\": geburtsortundland },\n        { \"field\": \"anschriftwohnung\", \"label\": \"11 Anschrift der Wohnung (Straße, Hausnummer, Postleitzahl, Ort)\", \"entry\": anschriftwohnung },\n        { \"field\": \"wohnungtel\", \"label\": \"(Mobil-)Telefonnummer\", \"entry\": wohnungtel },\n        { \"field\": \"wohnungfax\", \"label\": \"Faxnummer\", \"entry\": wohnungfax },\n        { \"field\": \"wohnungmail\", \"label\": \"E-Mail-Adresse\", \"entry\": wohnungmail },\n        { \"field\": \"wohnunginternet\", \"label\": \"Internetadresse\", \"entry\": wohnunginternet },\n        { \"field\": \"zahlgesellschaftler\", \"label\": \"12 Zahl der geschäftsführenden Gesellschafter (nur bei Personengesellschaften) / Zahl der gesetzlichen Vertreter (nur bei juristischen Personen)\", \"entry\": zahlgesellschaftler },\n        { \"field\": \"zahlgesetzvertreter\", \"label\": \"Zahl der gesetzlichen Vertreter\", \"entry\": zahlgesetzvertreter },\n        { \"field\": \"beteiligungoefenthand\", \"label\": \"13 Liegt eine Beteiligung der öffentlichen Hand vor?\", \"entry\": beteiligungoefenthand },\n        { \"field\": \"vertrbereperson\", \"label\": \"14 Vertretungsberechtigte Person/Betriebsleiter (nur bei inländischen Aktiengesellschaften, Zweigniederlassungen und unselbstständigen Name, Vornamen)\", \"entry\": vertrbereperson },\n        { \"field\": \"betriebsstaette\", \"label\": \"15 Betriebsstätte\", \"entry\": betriebsstaette },\n        { \"field\": \"betriebsstaettetel\", \"label\": \"(Mobil-)Telefonnummer\", \"entry\": betriebsstaettetel },\n        { \"field\": \"betriebsstaettefax\", \"label\": \"Faxnummer\", \"entry\": betriebsstaettefax },\n        { \"field\": \"betriebsstaettemail\", \"label\": \"E-Mail-Adresse\", \"entry\": betriebsstaettemail },\n        { \"field\": \"betriebsstaetteinternet\", \"label\": \"Internetadresse\", \"entry\": betriebsstaetteinternet },\n        { \"field\": \"hauptniederlassung\", \"label\": \"16 Hauptniederlassung (falls die Betriebsstätte lediglich Zweigniederlassung oder unselbstständige Zweigstelle ist)\", \"entry\": hauptniederlassung },\n        { \"field\": \"hauptniederlassungtel\", \"label\": \"(Mobil-)Telefonnummer\", \"entry\": hauptniederlassungtel },\n        { \"field\": \"hauptniederlassungfax\", \"label\": \"Faxnummer\", \"entry\": hauptniederlassungfax },\n        { \"field\": \"hauptniederlassungmail\", \"label\": \"E-Mail-Adresse\", \"entry\": hauptniederlassungmail },\n        { \"field\": \"hauptniederlassunginternet\", \"label\": \"Internetadresse\", \"entry\": hauptniederlassunginternet },\n        { \"field\": \"früherebetriebsstaette\", \"label\": \"17 Frühere Betriebsstätte\", \"entry\": früherebetriebsstaette },\n        { \"field\": \"früherebetriebsstaettetel\", \"label\": \"(Mobil-)Telefonnummer\", \"entry\": früherebetriebsstaettetel },\n        { \"field\": \"früherebetriebsstaettefax\", \"label\": \"Faxnummer\", \"entry\": früherebetriebsstaettefax },\n        { \"field\": \"früherebetriebsstaettemail\", \"label\": \"E-Mail-Adresse\", \"entry\": früherebetriebsstaettemail },\n        { \"field\": \"früherebetriebsstaetteinternet\", \"label\": \"Internetadresse\", \"entry\": früherebetriebsstaetteinternet },\n        { \"field\": \"beschreibungtaetigkeit\", \"label\": \"18 Angemeldete Tätigkeit (bitte genau angeben und Tätigkeit möglichst genau beschreiben; z.B. Herstellung von Möbeln, Elektroinstallationen und Elektroeinzelhandel, Großhandel mit Lebensmitteln); bei mehreren Tätigkeiten bitte den Schwerpunkt unterstreichen - ggf. ein Beiblatt\", \"entry\": beschreibungtaetigkeit },\n        { \"field\": \"nebengewerbe\", \"label\": \"19 Wird die Tätigkeit (vorerst) im Nebenerwerb betrieben?\", \"entry\": nebengewerbe },\n        { \"field\": \"datumbegintaetigkeit\", \"label\": \"20 Datum des Beginns der angemeldeten Tätigkeit\", \"entry\": datumbegintaetigkeit },\n        { \"field\": \"artbetrieb\", \"label\": \"21 Art des angemeldeten Betriebes\", \"entry\": artbetrieb },\n        { \"field\": \"zahlgeschführpersonvoll\", \"label\": \"22 Zahl der bei Geschäftsaufnahme tätigen Personen (einschließlich Aushilfen, Ehe- oder Lebenspartner des Inhabers); ohne Inhaber\", \"entry\": zahlgeschführpersonvoll },\n        { \"field\": \"zahlgeschführpersonteil\", \"label\": \"Zahl der teilzeitbeschäftigten Personen\", \"entry\": zahlgeschführpersonteil },\n        { \"field\": \"anmerstfür\", \"label\": \"23 eine Hauptniederlassung / 24 ein Reisegewerbe\", \"entry\": anmerstfür },\n        { \"field\": \"grundneueinübern\", \"label\": \"25 Grund der Neuerrichtung/der Übernahme\", \"entry\": grundneueinübern },\n        { \"field\": \"namefrühgewerb\", \"label\": \"26 Name des früheren Gewerbetreibenden oder früherer Firmenname\", \"entry\": namefrühgewerb },\n        { \"field\": \"bishgesetunfallversich\", \"label\": \"27 Außer bei Neugründung: Angabe des bisherigen gesetzlichen Unfallversicherungsträgers\", \"entry\": bishgesetunfallversich },\n        { \"field\": \"bishmitglnum\", \"label\": \"Mitgliedsnummer beim Unfallversicherungsträger\", \"entry\": bishmitglnum },\n        { \"field\": \"erlaubnis\", \"label\": \"28 Liegt eine Erlaubnis vor?\", \"entry\": erlaubnis },\n        { \"field\": \"handwerkskarte\", \"label\": \"29 Nur für Handwerksbetriebe der Anlage der Handwerksordnung Liegt eine Handwerkskarte vor?\", \"entry\": handwerkskarte },\n        { \"field\": \"aufenthaltstitel\", \"label\": \"30 Nur für Ausländer, die einen Aufenthaltstitel benötigen Liegt ein Aufenthaltstitel vor?\", \"entry\": aufenthaltstitel },\n        { \"field\": \"entauftitelauflbesch\", \"label\": \"31 Enthält der Aufenthaltstitel eine die Erwerbstätigkeit betreffende Auflage und/oder Beschränkung?\", \"entry\": entauftitelauflbesch },\n        { \"field\": \"datum\", \"label\": \"Datum\", \"entry\": datum },\n        { \"field\": \"unterschrift\", \"label\": \"Unterschrift\", \"entry\": unterschrift }\n    ]\n};\n\n// HTML-Dokument erstellen\nlet htmlContent = `\n<!DOCTYPE html>\n<html lang=\"de\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>${headline}</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      line-height: 1.6;\n      margin: 20px;\n      color: #333;\n    }\n    h1 {\n      text-align: center;\n      color: #2c3e50;\n      border-bottom: 2px solid #2c3e50;\n      padding-bottom: 10px;\n    }\n    .field-container {\n      margin-bottom: 20px;\n      padding: 10px;\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      background-color: #f9f9f9;\n    }\n    .field-label {\n      font-weight: bold;\n      color: #2c3e50;\n      margin-bottom: 5px;\n    }\n    .field-entry {\n      margin: 0;\n      color: #555;\n    }\n  </style>\n</head>\n<body>\n  <h1>${headline}</h1>\n`;\n\n// Felder als HTML hinzufügen\ninputData.fields.forEach(field => {\n  htmlContent += `\n  <div class=\"field-container\">\n    <div class=\"field-label\">${field.label}</div>\n    <p class=\"field-entry\">${field.entry || \"Keine Daten vorhanden\"}</p>\n  </div>\n  `;\n});\n\n// HTML-Dokument abschließen\nhtmlContent += `\n</body>\n</html>\n`;\n\n// HTML als JSON zurückgeben\nreturn [{\n  json: {\n    html: htmlContent\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        120
      ],
      "id": "bbf9a395-877c-431a-9c0b-6316181929a0",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.pdfshift.io/v3/convert/pdf",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"source\": {{ JSON.stringify($json.html) }},\n    \"sandbox\": false\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1320,
        100
      ],
      "id": "f3385d7e-2d03-4894-bbef-20d54301e41f",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "AxPMQKtvcCAQRLij",
          "name": "Header Auth account"
        },
        "httpBasicAuth": {
          "id": "UIe5mZ73fnxNfh0c",
          "name": "Unnamed credential"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Postgres": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Data from {table}": {
      "main": [
        [
          {
            "node": "Delete from Chathistory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete from Chathistory": {
      "main": [
        [
          {
            "node": "delete from Mothertable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Delete Data from {table}",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9a6752c0-3f0f-41c3-8461-223128b06113",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ed4f3f37220443d82fec76dc79b331975281d2af5e70e3db9bcbd487ec78ae41"
  },
  "id": "1Lb1oAairolhy818",
  "tags": [
    {
      "createdAt": "2025-04-16T15:18:03.721Z",
      "updatedAt": "2025-04-16T15:18:33.399Z",
      "id": "hAZFpoylzRVpV5mT",
      "name": "Commune"
    },
    {
      "createdAt": "2025-04-16T15:21:13.120Z",
      "updatedAt": "2025-04-16T15:21:13.120Z",
      "id": "zUivaJiv72U6Dwx4",
      "name": "Sub-Flow"
    }
  ]
}