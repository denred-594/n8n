{
  "name": "Remi 1.1 - saveUserData",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "id"
            },
            {
              "name": "formular"
            },
            {
              "name": "feld"
            },
            {
              "name": "Wert"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -920,
        200
      ],
      "id": "76b41f88-9aee-4f07-8a01-405f2d065725",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT column_name, data_type\nFROM information_schema.columns\nWHERE table_name = '{{ $('When Executed by Another Workflow').first().json.formular }}'\n  AND column_name = '{{ $json.find_first_null_column }}';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -40,
        200
      ],
      "id": "ec692ce3-33ed-48a3-81d1-d70094ca021f",
      "name": "Determine DataType of new field",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "6SqxrvWZi2YWF4Hw",
          "name": "neondb_owner Remi 1.0"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE EXTENSION IF NOT EXISTS pgcrypto;\nDO $$ \nDECLARE \n    var_table TEXT := '{{ $json.formular }}';  -- Name der Tabelle\n    var_id TEXT := '{{ $json.id }}';  -- Eindeutige ID (z. B. UUID oder Primärschlüssel)\n    var_column TEXT := '{{ $json.feld }}';  -- Spaltenname\n    var_value TEXT := '{{ $json.Wert }}';  -- Neuer Wert (zu verschlüsseln)\n    encryption_key TEXT := 'DennyUndLevinWerdenReich';  -- Ersetze dies durch eine sichere Methode!\n    sql_query TEXT;\nBEGIN\n    -- Dynamische SQL-Anweisung mit Verschlüsselung erstellen\n    sql_query := format(\n        'INSERT INTO %I (id, %I) VALUES (%L, pgp_sym_encrypt(%L, %L)) \n         ON CONFLICT (id) DO UPDATE SET %I = pgp_sym_encrypt(%L, %L)',\n        var_table, var_column, var_id, var_value, encryption_key, var_column, var_value, encryption_key\n    );\n    \n    -- SQL ausführen\n    EXECUTE sql_query;\nEND $$;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -700,
        200
      ],
      "id": "84067c23-c95c-4527-828e-79c308673946",
      "name": "Save Userdata",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "6SqxrvWZi2YWF4Hw",
          "name": "neondb_owner Remi 1.0"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE OR REPLACE FUNCTION find_first_null_column(tablename TEXT, record_id TEXT)\nRETURNS TEXT AS $$\nDECLARE\n    current_column TEXT;\n    result TEXT;\nBEGIN\n    -- Durchlaufe alle Spalten der Tabelle, sortiert nach ihrer Erstellungsposition\n    FOR current_column IN \n        SELECT column_name\n        FROM information_schema.columns\n        WHERE table_name = tablename\n        ORDER BY ordinal_position  -- Sortiert nach der ordinalen Position der Spalten in der Tabelle\n    LOOP\n        -- Dynamische SQL-Abfrage ausführen, um den Wert der Spalte zu prüfen\n        EXECUTE format('SELECT %I FROM %I WHERE id = %L LIMIT 1', quote_ident(current_column), quote_ident(tablename), record_id)\n        INTO result;\n        \n        -- Wenn der Wert NULL ist, gib den Spaltennamen zurück\n        IF result IS NULL THEN\n            RETURN current_column;  -- Spaltenname wird zurückgegeben\n        END IF;\n    END LOOP;\n    \n    -- Falls keine NULL-Spalte gefunden wurde, gib 'No null column found' zurück\n    RETURN 'No null column found';  -- Optional: Text, wenn keine leere Spalte gefunden wurde\nEND;\n$$ LANGUAGE plpgsql;\n\nSELECT find_first_null_column('{{ $('When Executed by Another Workflow').item.json.formular }}', '{{ $('When Executed by Another Workflow').item.json.id }}');\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -480,
        200
      ],
      "id": "bbe5e36f-8506-48e5-87d0-c7dfb8217e0b",
      "name": "get next Collumn",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "6SqxrvWZi2YWF4Hw",
          "name": "neondb_owner Remi 1.0"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "sensetivedata",
          "mode": "list",
          "cachedResultName": "sensetivedata"
        },
        "where": {
          "values": [
            {
              "column": "name",
              "value": "={{ $('get next Collumn').item.json.find_first_null_column }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        220,
        200
      ],
      "id": "e129a132-cfa4-495b-b54e-2c5f5fb0bad7",
      "name": "is collumn sensetive",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "6SqxrvWZi2YWF4Hw",
          "name": "neondb_owner Remi 1.0"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "mothertable",
          "mode": "list",
          "cachedResultName": "mothertable"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('When Executed by Another Workflow').first().json.id }}",
            "aktuellesfeld": "={{ $('get next Collumn').first().json.find_first_null_column }}",
            "typoffeld": "={{ $('Determine DataType of new field').first().json.data_type }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "formular",
              "displayName": "formular",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "aktuellesfeld",
              "displayName": "aktuellesfeld",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "typoffeld",
              "displayName": "typoffeld",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "sensitivequestion",
              "displayName": "sensitivequestion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "finished",
              "displayName": "finished",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        500,
        200
      ],
      "id": "a3b0af59-845e-4433-a2b5-a2c505332261",
      "name": "update Mothertable",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "6SqxrvWZi2YWF4Hw",
          "name": "neondb_owner Remi 1.0"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "322b434f-47c0-401e-b921-df2c4886a73c",
              "leftValue": "={{ $json.find_first_null_column }}",
              "rightValue": "No null column found",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -260,
        180
      ],
      "id": "9e307499-5382-40eb-8ab0-51c8e345e557",
      "name": "If1",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "1Lb1oAairolhy818",
          "mode": "list",
          "cachedResultName": "Remi 1.0 - SendFormular"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('When Executed by Another Workflow').first().json.id }}",
            "formular": "={{ $('When Executed by Another Workflow').first().json.formular }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "formular",
              "displayName": "formular",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "99a94d08-4e45-41b8-8d13-484f86dfa5d8",
      "name": "Execute Workflow"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "id": "8408d3399360791e94229426f9ff5622c75a800176ef8c9991dfe6ff4ff9d462ba5e65688c529d7fae1fd955d300db3c0316cbbc7742e207ce24c6bc8455cc3b",
          "formular": "gewerbeanmeldung",
          "feld": "handelsregister",
          "Wert": "404049"
        }
      }
    ]
  },
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Save Userdata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Determine DataType of new field": {
      "main": [
        [
          {
            "node": "is collumn sensetive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Userdata": {
      "main": [
        [
          {
            "node": "get next Collumn",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get next Collumn": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "is collumn sensetive": {
      "main": [
        [
          {
            "node": "update Mothertable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Determine DataType of new field",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update Mothertable": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3c5866f8-bb65-495f-b598-cd6e5b33e00d",
  "meta": {
    "instanceId": "ed4f3f37220443d82fec76dc79b331975281d2af5e70e3db9bcbd487ec78ae41"
  },
  "id": "WqKsrj0L6Xh9O87w",
  "tags": [
    {
      "createdAt": "2025-04-16T15:18:03.721Z",
      "updatedAt": "2025-04-16T15:18:33.399Z",
      "id": "hAZFpoylzRVpV5mT",
      "name": "Commune"
    },
    {
      "createdAt": "2025-04-16T15:21:13.120Z",
      "updatedAt": "2025-04-16T15:21:13.120Z",
      "id": "zUivaJiv72U6Dwx4",
      "name": "Sub-Flow"
    }
  ]
}