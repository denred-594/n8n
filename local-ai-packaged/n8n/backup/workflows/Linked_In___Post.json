{
  "name": "Linked In - Post",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -300,
        -40
      ],
      "id": "61ee935b-0fb3-4668-b0c6-49a31f556ee4",
      "name": "Merge",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2192ae96-0cf3-44f1-91f5-e5e0fc55e543",
              "name": "=agent_input",
              "value": "={{ $('Merge').first().json }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -100,
        -40
      ],
      "id": "9087427b-4c4b-425f-8739-3039d3b107d7",
      "name": "Set Input",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "be45ccb6-356f-4f84-be39-e9d3d279ed3d",
              "name": "query",
              "value": "={{ $('Check Info').first().json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -200,
        200
      ],
      "id": "e9b7ebdd-e496-42fe-92c2-f86e04ecdc1b",
      "name": "Set Search Query",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://google.serper.dev/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "=[YOUR SEARCH QUERY]"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "[YOUR API KEY]"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        200
      ],
      "id": "77e48490-26f8-4447-a062-bdacaced9da2",
      "name": "Get Missing Info",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Get Missing Info').first().json }}",
        "options": {
          "systemMessage": "=You are tasked with extracting {{ search_query }} for {{ company_name }}, a company based in {{ country }}, using the provided search results. Follow these instructions:\n\n\n1. Focus on Relevant Sources:\nUse the first search results or trusted sources that explicitly refer to {{ company_name }} in {{ country }}.\n\n\n2. Extraction Rules:\n\nExtract the requested information based on {{ search_query }}.\n\n\n3. Validation:\nEnsure the extracted data belongs to {{ company_name }}. Disregard information obviously related to other entities.\n\n\n4. Output Format:\n\nReturn the extracted information as a string.\n\nIf no valid information is found, return 'Not found'.\n\n\n5. Output Name:\nName the output as {{ found_info }}."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        260,
        200
      ],
      "id": "d0dd6a1c-263d-44ff-b0a3-cc83cd105d41",
      "name": "Filter Missing Info",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Get inputs\nconst originalInput = $('Set Input').first()?.json?.agent_input || {};\nconst newData = $('Filter Missing Info').first()?.json?.output || '';\n\n// Parse original data if it's a stringified JSON\nlet originalData = {};\ntry {\n  originalData = typeof originalInput === 'string' ? JSON.parse(originalInput) : originalInput;\n} catch (e) {\n  throw new Error('Failed to parse original data: ' + e.message);\n}\n\n// Initialize merged data with original values\nconst mergedData = {\n  Firmenname: originalData.Firmenname || '',\n  Webseite: originalData.Webseite || '',\n  Telefonnummer: originalData.Telefonnummer || originalData.Telefon || [],\n  Kontext: originalData.Kontext || [],\n  Email: originalData.Email || [],\n  AgentOutput: originalData.AgentOutput || [] // Initialize AgentOutput array\n};\n\n// Append raw newData to AgentOutput if it exists and is not empty\nif (newData && typeof newData === 'string' && newData.trim() !== '') {\n  if (!mergedData.AgentOutput.includes(newData)) {\n    mergedData.AgentOutput.push(newData);\n  }\n}\n\n// Return merged data\nreturn [{ json: mergedData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -520,
        200
      ],
      "id": "12dac0a5-f871-48e7-bb33-e1c4f105538f",
      "name": "Add Data",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "475d76ca-99e7-45bb-a3ba-f5310e31f538",
              "leftValue": "={{ $('Filter Missing Info').first().json.output }}",
              "rightValue": "Not found",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        620,
        200
      ],
      "id": "d3460e11-e156-4347-a3de-cb103cf5ec07",
      "name": "No Data Found",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        160,
        260
      ],
      "id": "b70db555-b1ea-4d16-b1d1-6fed797b335f",
      "name": "GPT 4o-mini",
      "credentials": {
        "openAiApi": {
          "id": "c7rOayprscHnt5na",
          "name": "OpenAi account Main (Denny)"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2200,
        -220
      ],
      "id": "62548dc7-11b5-4ddf-81da-f1688793ca59",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d0077978-7f51-483a-a599-5e6eed788385",
              "leftValue": "={{ $('Check Info').first().json.output }}",
              "rightValue": "Complete",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        480,
        -40
      ],
      "id": "a2ecedc4-1aa1-418f-95ac-c40d3fd8698e",
      "name": "Output Complete?",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1580,
        -60
      ],
      "id": "bb64b3aa-47a8-4f5e-b512-18cfe58e5462",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Set Input').first().json.agent_input }}",
        "options": {
          "systemMessage": "=## Task: Validate Company JSON Input\n\nCheck if all required information is present.\nReturn the first missing/invalid info name, or `Complete` if everything is present.\n\n### Required Info\n\n- `Example 1`\n- `Example 2`\n- `Example 3`\n\n### Output\n\nOnly output single words  \nReturn one of:\n- `Complete` – if all required information is present.\n- Only a single name – e.g. `Example 1` or `Example 2`"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        120,
        -40
      ],
      "id": "7d8eb1bf-ac28-453c-8cd3-cdc804fbc4e3",
      "name": "Check Info",
      "onError": "continueRegularOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Set Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Input": {
      "main": [
        [
          {
            "node": "Check Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Search Query": {
      "main": [
        [
          {
            "node": "Get Missing Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Missing Info": {
      "main": [
        [
          {
            "node": "Filter Missing Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Missing Info": {
      "main": [
        [
          {
            "node": "No Data Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "No Data Found": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT 4o-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Check Info",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Filter Missing Info",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Output Complete?": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Search Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Info": {
      "main": [
        [
          {
            "node": "Output Complete?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8c8026d9-77fa-40d1-8f42-ab3daf05f813",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ed4f3f37220443d82fec76dc79b331975281d2af5e70e3db9bcbd487ec78ae41"
  },
  "id": "8R63gvgckAmZOq2p",
  "tags": []
}