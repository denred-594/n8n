{
  "name": "Automated Outreach - Main",
  "nodes": [
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1mKdabtpUD7w95noc02rX8fLw7siz30tW6xuqHrcSIig",
          "mode": "list",
          "cachedResultName": "Lead-Liste-Taxiunternehmen",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1mKdabtpUD7w95noc02rX8fLw7siz30tW6xuqHrcSIig/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Tabellenblatt1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1mKdabtpUD7w95noc02rX8fLw7siz30tW6xuqHrcSIig/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "Firmenname",
              "displayName": "Firmenname",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Webseite",
              "displayName": "Webseite",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefonnummer",
              "displayName": "Telefonnummer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        4560,
        3320
      ],
      "id": "6347cb26-3ba3-450b-b4ff-7965e57e0ed7",
      "name": "Insert Contact Data",
      "executeOnce": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0aRlaoxfv5m8PiQz",
          "name": "Google Sheets Levin"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        4860,
        3440
      ],
      "id": "41c9c9bd-34c2-403c-89d8-eaf8b4ee2d8b",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "={{ $('Sub Loop').first()?.json['websiteLink'] && $('Sub Loop').first()?.json['websiteLink'] !== \"\" ? $('Sub Loop').first()?.json['websiteLink'] + \"/impressum\" : \"impressum\" }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        40,
        3440
      ],
      "id": "929cca6d-695e-4c27-bc9c-4fa0eeccf152",
      "name": "Get Impressum",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "a93d436c-3435-4d2e-9e96-6507d8ccaf37",
              "leftValue": "={{ $('Get Impressum').first().json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        240,
        3440
      ],
      "id": "5f5a2d5e-bb67-474e-882d-ccc3872bad03",
      "name": "Validate Impressum",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "a93d436c-3435-4d2e-9e96-6507d8ccaf37",
              "leftValue": "={{ $('Get Contact Page').first().json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        660,
        3280
      ],
      "id": "4f4a3f48-d04b-436c-9c91-876c92f9de2c",
      "name": "Validate Contact Page",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "={{ $('Sub Loop').first()?.json['websiteLink'] && $('Sub Loop').first()?.json['websiteLink'] !== \"\" ? $('Sub Loop').first()?.json['websiteLink'] + \"/kontakt\" : \"\" }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        460,
        3280
      ],
      "id": "da677e8c-fd5a-476e-899a-127ccb784f9f",
      "name": "Get Contact Page",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Zugriff auf die HTML-Daten aus der Eingabevariable\nconst htmlContent = $('Get Contact Page').first()?.json.data;\n\n// Hole Website-URL aus dem Loop\nconst website = $('Sub Loop').first().json.websiteLink || 'Unbekannte Website';\n\n// Fehlerprüfung für ungültigen Input\nif (!htmlContent) {\n  return [{\n    json: {\n      Firmenname: 'Unbekanntes Unternehmen',\n      Webseite: website,\n      Telefonnummer: [],\n      Kontext: [],\n      Email: [],\n      Adresse: { address: 'Unbekannt' }\n    }\n  }];\n}\n\n// Funktion für minimale Bereinigung (nur Tags entfernen)\nfunction minimalCleanHtml(html) {\n  return html\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>|<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '')\n    .replace(/<[^>]+>/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// Funktion zum Extrahieren von Telefonnummern mit Kontext\nfunction extractPhoneNumbersWithContext(text) {\n  const phoneRegex = /(?:(?:\\+?\\d{2,3}\\s*[(-]?\\d{2,4}[-)\\s]?)|(?:\\d{3,5}\\s*[-/]\\s*))?\\d{3,}\\s*\\d{3,}/g;\n  const contextKeywords = /telefon|a href=\"tel:|tel\\.|Tel.:|kontakt|phone|call|nummer|anruf/i;\n  const faxRegex = /fax|telefax/i;\n  const results = [];\n  const phoneSet = new Set();\n\n  let match;\n  while ((match = phoneRegex.exec(text)) !== null) {\n    let phoneNumber = match[0].replace(/\\s/g, '');\n    if (!phoneSet.has(phoneNumber) && phoneNumber.length >= 8) {\n      const startIndex = match.index;\n      const preContext = text.slice(Math.max(0, startIndex - 20), startIndex); // Check 20 chars before\n      if (faxRegex.test(preContext)) continue; // Skip if \"fax\" or \"telefax\" is immediately before\n      phoneSet.add(phoneNumber);\n      const contextText = text.slice(Math.max(0, startIndex - 100), startIndex + phoneNumber.length + 100);\n      const context = contextKeywords.test(contextText) ? 'Gefunden in: Kontaktbereich' : 'Gefunden in: Allgemeiner Inhalt';\n      results.push({ Telefonnummer: phoneNumber, Kontext: context });\n    }\n  }\n  return results;\n}\n\n// Funktion zum Extrahieren von E-Mail-Adressen\nfunction extractEmails(text) {\n  const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-z]{2,}/g;\n  const emailSet = new Set();\n  let match;\n  while ((match = emailRegex.exec(text)) !== null) {\n    if (!match[0].includes('image') && !match[0].endsWith('.png') && !match[0].endsWith('.jpg')) {\n      emailSet.add(match[0]);\n    }\n  }\n  return Array.from(emailSet);\n}\n\n// Funktion zum Extrahieren des Firmennamens (immer aus URL)\nfunction extractCompanyName(text, website) {\n  const urlMatch = website.match(/https?:\\/\\/(?:www\\.)?([^\\/.]+)/i);\n  let name = urlMatch ? urlMatch[1].replace(/-/g, ' ').replace(/\\b\\w/g, c => c.toUpperCase()) : 'Unbekanntes Unternehmen';\n  return name;\n}\n\n// Funktion zum Extrahieren der Adresse\nfunction extractLocation(text) {\n  // Primäre Suche: Adressen mit \"Deutschland\"\n  const fullAddressRegex = /([\\w\\s\\-\\.]+\\s*\\d{1,4}(?:\\/[a-zA-Z])?,\\s*\\d{5}\\s*[A-Za-z\\s\\-\\.]+,\\s*Deutschland)/i;\n  let match = text.match(fullAddressRegex);\n  if (match) {\n    return { address: match[1].trim() };\n  }\n\n  // Fallback: Adressen ohne \"Deutschland\"\n  const fallbackRegex = /([\\w\\s\\-\\.]+\\s*\\d{1,4}(?:\\/[a-zA-Z])?,\\s*\\d{5}\\s*[A-Za-z\\s\\-\\.]+)/i;\n  match = text.match(fallbackRegex);\n  if (match) {\n    return { address: match[1].trim() };\n  }\n\n  return { address: 'Unbekannt' };\n}\n\n// Textbereinigung und Extraktion\nconst rawText = minimalCleanHtml(htmlContent);\nconst phoneData = extractPhoneNumbersWithContext(rawText);\nconst Telefonnummer = phoneData.map(item => item.Telefonnummer);\nconst Kontext = phoneData.map(item => item.Kontext);\nconst Email = extractEmails(rawText);\nconst Adresse = extractLocation(rawText);\nconst Firmenname = extractCompanyName(htmlContent, website);\n\n// Rückgabe im n8n-Format\nreturn [{\n  json: {\n    Firmenname,\n    Webseite: website,\n    Telefonnummer,\n    Kontext,\n    Email\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        3280
      ],
      "id": "20587668-c472-451c-877c-b1be4c718a1b",
      "name": "Filter Contact Page",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "={{ $('Sub Loop').first()?.json['websiteLink'] && $('Sub Loop').first()?.json['websiteLink'] !== \"\" ? $('Sub Loop').first()?.json['websiteLink'] : \"\" }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        3120
      ],
      "id": "c4d93c25-827f-4206-b2bf-a70ce3997a22",
      "name": "Get Home Page",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "a93d436c-3435-4d2e-9e96-6507d8ccaf37",
              "leftValue": "={{ $('Get Home Page').first().json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1100,
        3120
      ],
      "id": "e2819637-59ba-4c78-8f05-5f4efd0733a3",
      "name": "Validate Home Page",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Zugriff auf die HTML-Daten aus der Eingabevariable\nconst htmlContent = $('Get Home Page').first()?.json.data;\n\n// Hole Website-URL aus dem Loop\nconst website = $('Sub Loop').first().json.websiteLink || 'Unbekannte Website';\n\n// Fehlerprüfung für ungültigen Input\nif (!htmlContent) {\n  return [{\n    json: {\n      Firmenname: 'Unbekanntes Unternehmen',\n      Webseite: website,\n      Telefonnummer: [],\n      Kontext: [],\n      Email: [],\n      Adresse: { address: 'Unbekannt' }\n    }\n  }];\n}\n\n// Funktion für minimale Bereinigung (nur Tags entfernen)\nfunction minimalCleanHtml(html) {\n  return html\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>|<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '')\n    .replace(/<[^>]+>/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// Funktion zum Extrahieren von Telefonnummern mit Kontext\nfunction extractPhoneNumbersWithContext(text) {\n  const phoneRegex = /(?:(?:\\+?\\d{2,3}\\s*[(-]?\\d{2,4}[-)\\s]?)|(?:\\d{3,5}\\s*[-/]\\s*))?\\d{3,}\\s*\\d{3,}/g;\n  const contextKeywords = /telefon|a href=\"tel:|tel\\.|Tel.:|kontakt|phone|call|nummer|anruf/i;\n  const faxRegex = /fax|telefax/i;\n  const results = [];\n  const phoneSet = new Set();\n\n  let match;\n  while ((match = phoneRegex.exec(text)) !== null) {\n    let phoneNumber = match[0].replace(/\\s/g, '');\n    if (!phoneSet.has(phoneNumber) && phoneNumber.length >= 8) {\n      const startIndex = match.index;\n      const preContext = text.slice(Math.max(0, startIndex - 20), startIndex); // Check 20 chars before\n      if (faxRegex.test(preContext)) continue; // Skip if \"fax\" or \"telefax\" is immediately before\n      phoneSet.add(phoneNumber);\n      const contextText = text.slice(Math.max(0, startIndex - 100), startIndex + phoneNumber.length + 100);\n      const context = contextKeywords.test(contextText) ? 'Gefunden in: Kontaktbereich' : 'Gefunden in: Allgemeiner Inhalt';\n      results.push({ Telefonnummer: phoneNumber, Kontext: context });\n    }\n  }\n  return results;\n}\n\n// Funktion zum Extrahieren von E-Mail-Adressen\nfunction extractEmails(text) {\n  const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-z]{2,}/g;\n  const emailSet = new Set();\n  let match;\n  while ((match = emailRegex.exec(text)) !== null) {\n    if (!match[0].includes('image') && !match[0].endsWith('.png') && !match[0].endsWith('.jpg')) {\n      emailSet.add(match[0]);\n    }\n  }\n  return Array.from(emailSet);\n}\n\n// Funktion zum Extrahieren des Firmennamens (immer aus URL)\nfunction extractCompanyName(text, website) {\n  const urlMatch = website.match(/https?:\\/\\/(?:www\\.)?([^\\/.]+)/i);\n  let name = urlMatch ? urlMatch[1].replace(/-/g, ' ').replace(/\\b\\w/g, c => c.toUpperCase()) : 'Unbekanntes Unternehmen';\n  return name;\n}\n\n// Funktion zum Extrahieren der Adresse\nfunction extractLocation(text) {\n  // Primäre Suche: Adressen mit \"Deutschland\"\n  const fullAddressRegex = /([\\w\\s\\-\\.]+\\s*\\d{1,4}(?:\\/[a-zA-Z])?,\\s*\\d{5}\\s*[A-Za-z\\s\\-\\.]+,\\s*Deutschland)/i;\n  let match = text.match(fullAddressRegex);\n  if (match) {\n    return { address: match[1].trim() };\n  }\n\n  // Fallback: Adressen ohne \"Deutschland\"\n  const fallbackRegex = /([\\w\\s\\-\\.]+\\s*\\d{1,4}(?:\\/[a-zA-Z])?,\\s*\\d{5}\\s*[A-Za-z\\s\\-\\.]+)/i;\n  match = text.match(fallbackRegex);\n  if (match) {\n    return { address: match[1].trim() };\n  }\n\n  return { address: 'Unbekannt' };\n}\n\n// Textbereinigung und Extraktion\nconst rawText = minimalCleanHtml(htmlContent);\nconst phoneData = extractPhoneNumbersWithContext(rawText);\nconst Telefonnummer = phoneData.map(item => item.Telefonnummer);\nconst Kontext = phoneData.map(item => item.Kontext);\nconst Email = extractEmails(rawText);\nconst Adresse = extractLocation(rawText);\nconst Firmenname = extractCompanyName(htmlContent, website);\n\n// Rückgabe im n8n-Format\nreturn [{\n  json: {\n    Firmenname,\n    Webseite: website,\n    Telefonnummer,\n    Kontext,\n    Email\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        3120
      ],
      "id": "23c1e3ba-6ea3-42fb-a163-dfc1be680177",
      "name": "Filter Home Page",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "numberInputs": 5
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        2080,
        3400
      ],
      "id": "7a2e5cbb-ba1d-4cfb-99ae-1e2edb811f3a",
      "name": "Merge",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2192ae96-0cf3-44f1-91f5-e5e0fc55e543",
              "name": "=agent_input",
              "value": "={{ $('Merge').first().json }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2280,
        3440
      ],
      "id": "99c6e1ac-ef06-4e43-8bb3-0ac252b114ef",
      "name": "Set Input",
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Set Input').first().json.agent_input }}",
        "options": {
          "systemMessage": "=## Task: Validate Company JSON Input\n\nCheck if all required informations are present.  \nReturn the first missing/invalid info name, or `Complete` if everything is present.\nDon't be too strict.\n\n### Required Info\n\n- `Email`: At least one valid email (e.g. `123@456.789`) required really anywhere in the input data.\n- `Telefonnummer`: At least one phone number required anywhere in the input data.\n- \"required anywhere in the input data\" means literally anywhere, could be even in the wrong field.\n\n### Output\n\nOnly output single words  \nReturn one of:\n- `Complete` – if both email AND telefon is present\n- Only a single name – e.g. `Email` or `Telefon`\n- If both are missing: return `Email`"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2620,
        3440
      ],
      "id": "57c7804a-d828-4388-8949-8fcf1ef316d2",
      "name": "Check Contact Details",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Set Input').item.json.agent_input }}",
        "options": {
          "systemMessage": "=Tasks:\n\nCorrect Info:\nFirmenname: Derive from Webseite URL (e.g., \"https://www.luedersundstange.de\" -> \"Lüders und Stange\"). If no valid URL, use \"Not found\".\n\nWebseite: Keep as is, no validation. If missing/empty/null/undefined, use \"Not found\".\n\nTelefonnummer: Pick only the most logical phone number. You have to pick one at least. Add a \"+49\" to the beginning of the number string if its missing (for numbers only).\nExample: \"30921037360\" -> \"+4930921037360\"\n\"Not found\" -> \"Not found\" - for \"Not found\" no changes.\n\nFormat without spaces or dashes. Valid length: 7 to 13 digits. Discard completely unusable numbers.\n\nEmail: Validate emails (e.g., \"123@456.789\"). Join valid emails with \", \" (comma and space). If none valid or empty, use \"\".\n\nCSV Output:\nColumns: Firmenname, Webseite, Telefonnummer, Email.\nUse first valid Telefonnummer. Join Email with \", \" (comma and space). Quote fields with commas/special characters.\nOutput only the CSV string with headers and data separated by a literal newline (\\n). Never include explanations or extra text.\nExample: \"Firmenname\",\"Webseite\",\"Telefonnummer\",\"Email\"\n\\n\"MARTIN Spedition\",\"https://martin-spedition.de\",\"+4930921037360\",\"info@martin-spedition.de\"\n\nReturn only a CSV string with 4 columns, headers and data separated by \\n.\nUse \"Not found\" for missing/invalid fields.\nUse \", \" for Email field separation.\nDo not include thoughts, explanations, or any text outside the CSV.\n\nBe sure no field is empty, use \"Not found\" in case."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        3580,
        3440
      ],
      "id": "300daaac-8270-4b3a-9a65-f9b63618e46c",
      "name": "Format Contact Details",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const input = $('Format CSV').first()?.json?.formattedCSV;\nif (!input) {\n  throw new Error('No CSV data found in FormatCSV output');\n}\nif (typeof input !== 'string' || !input.includes('\\n')) {\n  throw new Error('Invalid CSV format in FormatCSV output');\n}\n\nconst lines = input.split('\\n').filter(line => line.trim());\nif (lines.length < 2) {\n  throw new Error('CSV must have at least two lines: headers and data');\n}\n\nfunction parseCSVLine(line) {\n  const result = [];\n  let current = '';\n  let inQuotes = false;\n\n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      result.push(current.trim());\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  result.push(current.trim());\n\n  if (line.endsWith(',')) {\n    result.push('');\n  }\n\n  return result.map(item => item.replace(/^\"|\"$/g, ''));\n}\n\nconst headers = parseCSVLine(lines[0]);\nlet data = parseCSVLine(lines[1]);\n\nif (data.length < headers.length) {\n  while (data.length < headers.length) {\n    data.push('');\n  }\n} else if (data.length > headers.length) {\n  data = data.slice(0, headers.length);\n}\n\nconst result = {};\nheaders.forEach((header, index) => {\n  result[header] = data[index] || '';\n});\n\nreturn [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4140,
        3440
      ],
      "id": "a817e315-a45f-4a14-a486-cda6227b0340",
      "name": "Parse CSV",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const input = $('Format Contact Details').first()?.json?.output;\n\nif (!input) {\n  return [{\n    json: {\n      formattedCSV: '\"Firmenname\",\"Webseite\",\"Telefonnummer\",\"Email\"\\n\"\",\"\",\"\",\"\"'\n    }\n  }];\n}\n\nconst headers = '\"Firmenname\",\"Webseite\",\"Telefonnummer\",\"Email\"';\n\nif (typeof input === 'string' && input.startsWith(headers)) {\n  const cleanedCSV = input.replace(/\\\\n/g, '\\n').trim();\n  const lines = cleanedCSV.split('\\n').filter(line => line.trim());\n  if (lines.length >= 2) {\n    return [{ json: { formattedCSV: cleanedCSV } }];\n  }\n}\n\nlet data = {};\nif (typeof input === 'string') {\n  try {\n    data = JSON.parse(input);\n  } catch (e) {\n    return [{\n      json: {\n        formattedCSV: `${headers}\\n\"Invalid JSON Input\",\"${input.slice(0, 50).replace(/\"/g, '\"\"')}\",\"\",\"\"`\n      }\n    }];\n  }\n} else if (typeof input === 'object' && input !== null) {\n  data = input;\n} else {\n  return [{\n    json: {\n      formattedCSV: `${headers}\\n\"Invalid Input Type\",\"${typeof input}\",\"\",\"\"`\n    }\n  }];\n}\n\nconst row = [\n  data.Firmenname || '',\n  data.Webseite || '',\n  Array.isArray(data.Telefon) && data.Telefon.length > 0 ? data.Telefon[0] : (data.Telefonnummer || ''),\n  Array.isArray(data.Email) && data.Email.length > 0 ? data.Email.join(', ') : (data.Email || '')\n].map(field => `\"${field.replace(/\"/g, '\"\"')}\"`).join(',');\n\nconst csv = `${headers}\\n${row}`;\n\nreturn [{ json: { formattedCSV: csv } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3960,
        3440
      ],
      "id": "f0a87c8d-2778-47df-818d-e0e45cb0d57a",
      "name": "Format CSV",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d0077978-7f51-483a-a599-5e6eed788385",
              "leftValue": "={{ $('Check Contact Details').first().json.output }}",
              "rightValue": "Complete",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3140,
        3440
      ],
      "id": "d3ea8136-982f-4f63-a30b-b98c554e99c2",
      "name": "If",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "be45ccb6-356f-4f84-be39-e9d3d279ed3d",
              "name": "query",
              "value": "={{ $('Check Contact Details').first().json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2520,
        3680
      ],
      "id": "011d64a9-57dd-4cc0-8f1d-4927b83cdc40",
      "name": "Set Search Query",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Zugriff auf die HTML-Daten aus der Eingabevariable\nconst htmlContent = $('Get Impressum').first()?.json.data;\n\n// Hole Website-URL aus dem Loop\nconst website = $('Sub Loop').first().json.websiteLink || 'Unbekannte Website';\n\n// Fehlerprüfung für ungültigen Input\nif (!htmlContent) {\n  return [{\n    json: {\n      Firmenname: 'Unbekanntes Unternehmen',\n      Webseite: website,\n      Telefonnummer: [],\n      Kontext: [],\n      Email: [],\n      Adresse: { address: 'Unbekannt' }\n    }\n  }];\n}\n\n// Funktion für minimale Bereinigung (nur Tags entfernen)\nfunction minimalCleanHtml(html) {\n  return html\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>|<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '')\n    .replace(/<[^>]+>/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// Funktion zum Extrahieren von Telefonnummern mit Kontext\nfunction extractPhoneNumbersWithContext(text) {\n  const phoneRegex = /(?:(?:\\+?\\d{2,3}\\s*[(-]?\\d{2,4}[-)\\s]?)|(?:\\d{3,5}\\s*[-/]\\s*))?\\d{3,}\\s*\\d{3,}/g;\n  const contextKeywords = /telefon|a href=\"tel:|tel\\.|Tel.:|kontakt|phone|call|nummer|anruf/i;\n  const faxRegex = /fax|telefax/i;\n  const results = [];\n  const phoneSet = new Set();\n\n  let match;\n  while ((match = phoneRegex.exec(text)) !== null) {\n    let phoneNumber = match[0].replace(/\\s/g, '');\n    if (!phoneSet.has(phoneNumber) && phoneNumber.length >= 8) {\n      const startIndex = match.index;\n      const preContext = text.slice(Math.max(0, startIndex - 20), startIndex); // Check 20 chars before\n      if (faxRegex.test(preContext)) continue; // Skip if \"fax\" or \"telefax\" is immediately before\n      phoneSet.add(phoneNumber);\n      const contextText = text.slice(Math.max(0, startIndex - 100), startIndex + phoneNumber.length + 100);\n      const context = contextKeywords.test(contextText) ? 'Gefunden in: Kontaktbereich' : 'Gefunden in: Allgemeiner Inhalt';\n      results.push({ Telefonnummer: phoneNumber, Kontext: context });\n    }\n  }\n  return results;\n}\n\n// Funktion zum Extrahieren von E-Mail-Adressen\nfunction extractEmails(text) {\n  const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-z]{2,}/g;\n  const emailSet = new Set();\n  let match;\n  while ((match = emailRegex.exec(text)) !== null) {\n    if (!match[0].includes('image') && !match[0].endsWith('.png') && !match[0].endsWith('.jpg')) {\n      emailSet.add(match[0]);\n    }\n  }\n  return Array.from(emailSet);\n}\n\n// Funktion zum Extrahieren des Firmennamens (immer aus URL)\nfunction extractCompanyName(text, website) {\n  const urlMatch = website.match(/https?:\\/\\/(?:www\\.)?([^\\/.]+)/i);\n  let name = urlMatch ? urlMatch[1].replace(/-/g, ' ').replace(/\\b\\w/g, c => c.toUpperCase()) : 'Unbekanntes Unternehmen';\n  return name;\n}\n\n// Funktion zum Extrahieren der Adresse\nfunction extractLocation(text) {\n  // Primäre Suche: Adressen mit \"Deutschland\"\n  const fullAddressRegex = /([\\w\\s\\-\\.]+\\s*\\d{1,4}(?:\\/[a-zA-Z])?,\\s*\\d{5}\\s*[A-Za-z\\s\\-\\.]+,\\s*Deutschland)/i;\n  let match = text.match(fullAddressRegex);\n  if (match) {\n    return { address: match[1].trim() };\n  }\n\n  // Fallback: Adressen ohne \"Deutschland\"\n  const fallbackRegex = /([\\w\\s\\-\\.]+\\s*\\d{1,4}(?:\\/[a-zA-Z])?,\\s*\\d{5}\\s*[A-Za-z\\s\\-\\.]+)/i;\n  match = text.match(fallbackRegex);\n  if (match) {\n    return { address: match[1].trim() };\n  }\n\n  return { address: 'Unbekannt' };\n}\n\n// Textbereinigung und Extraktion\nconst rawText = minimalCleanHtml(htmlContent);\nconst phoneData = extractPhoneNumbersWithContext(rawText);\nconst Telefonnummer = phoneData.map(item => item.Telefonnummer);\nconst Kontext = phoneData.map(item => item.Kontext);\nconst Email = extractEmails(rawText);\nconst Adresse = extractLocation(rawText);\nconst Firmenname = extractCompanyName(htmlContent, website);\n\n// Rückgabe im n8n-Format\nreturn [{\n  json: {\n    Firmenname,\n    Webseite: website,\n    Telefonnummer,\n    Kontext,\n    Email\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        3440
      ],
      "id": "71a0a567-91e7-46cd-9f54-b37203b3d75e",
      "name": "Filter Impressum",
      "retryOnFail": false,
      "executeOnce": false,
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://google.serper.dev/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $('Set Company').first().json.company }}{{ $('Set Parameters').first().json.country }} {{ $('Set Search Query').first().json.query }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "96962a8ab757a4eb981546637672369e4f946522"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2720,
        3680
      ],
      "id": "349e4154-f49d-409b-85a1-2dceac02c248",
      "name": "Get Missing Info",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "={{ $('Sub Loop').first()?.json['websiteLink'] && $('Sub Loop').first()?.json['websiteLink'] !== \"\" ? $('Sub Loop').first()?.json['websiteLink'] : \"\" }}/\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1320,
        2960
      ],
      "id": "648cad56-79f4-420c-b1b5-ddd5a3af86fe",
      "name": "Get Home Page 2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "a93d436c-3435-4d2e-9e96-6507d8ccaf37",
              "leftValue": "={{ $('Get Home Page 2').first().json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1540,
        2960
      ],
      "id": "821ce357-544b-49a4-87b4-70310d9d4319",
      "name": "Validate Home Page 2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Zugriff auf die HTML-Daten aus der Eingabevariable\nconst htmlContent = $('Get Home Page 2').first()?.json.data;\n\n// Hole Website-URL aus dem Loop\nconst website = $('Sub Loop').first().json.websiteLink || 'Unbekannte Website';\n\n// Fehlerprüfung für ungültigen Input\nif (!htmlContent) {\n  return [{\n    json: {\n      Firmenname: 'Unbekanntes Unternehmen',\n      Webseite: website,\n      Telefonnummer: [],\n      Kontext: [],\n      Email: [],\n      Adresse: { address: 'Unbekannt' }\n    }\n  }];\n}\n\n// Funktion für minimale Bereinigung (nur Tags entfernen)\nfunction minimalCleanHtml(html) {\n  return html\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>|<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '')\n    .replace(/<[^>]+>/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// Funktion zum Extrahieren von Telefonnummern mit Kontext\nfunction extractPhoneNumbersWithContext(text) {\n  const phoneRegex = /(?:(?:\\+?\\d{2,3}\\s*[(-]?\\d{2,4}[-)\\s]?)|(?:\\d{3,5}\\s*[-/]\\s*))?\\d{3,}\\s*\\d{3,}/g;\n  const contextKeywords = /telefon|a href=\"tel:|tel\\.|Tel.:|kontakt|phone|call|nummer|anruf/i;\n  const faxRegex = /fax|telefax/i;\n  const results = [];\n  const phoneSet = new Set();\n\n  let match;\n  while ((match = phoneRegex.exec(text)) !== null) {\n    let phoneNumber = match[0].replace(/\\s/g, '');\n    if (!phoneSet.has(phoneNumber) && phoneNumber.length >= 8) {\n      const startIndex = match.index;\n      const preContext = text.slice(Math.max(0, startIndex - 20), startIndex); // Check 20 chars before\n      if (faxRegex.test(preContext)) continue; // Skip if \"fax\" or \"telefax\" is immediately before\n      phoneSet.add(phoneNumber);\n      const contextText = text.slice(Math.max(0, startIndex - 100), startIndex + phoneNumber.length + 100);\n      const context = contextKeywords.test(contextText) ? 'Gefunden in: Kontaktbereich' : 'Gefunden in: Allgemeiner Inhalt';\n      results.push({ Telefonnummer: phoneNumber, Kontext: context });\n    }\n  }\n  return results;\n}\n\n// Funktion zum Extrahieren von E-Mail-Adressen\nfunction extractEmails(text) {\n  const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-z]{2,}/g;\n  const emailSet = new Set();\n  let match;\n  while ((match = emailRegex.exec(text)) !== null) {\n    if (!match[0].includes('image') && !match[0].endsWith('.png') && !match[0].endsWith('.jpg')) {\n      emailSet.add(match[0]);\n    }\n  }\n  return Array.from(emailSet);\n}\n\n// Funktion zum Extrahieren des Firmennamens (immer aus URL)\nfunction extractCompanyName(text, website) {\n  const urlMatch = website.match(/https?:\\/\\/(?:www\\.)?([^\\/.]+)/i);\n  let name = urlMatch ? urlMatch[1].replace(/-/g, ' ').replace(/\\b\\w/g, c => c.toUpperCase()) : 'Unbekanntes Unternehmen';\n  return name;\n}\n\n// Funktion zum Extrahieren der Adresse\nfunction extractLocation(text) {\n  // Primäre Suche: Adressen mit \"Deutschland\"\n  const fullAddressRegex = /([\\w\\s\\-\\.]+\\s*\\d{1,4}(?:\\/[a-zA-Z])?,\\s*\\d{5}\\s*[A-Za-z\\s\\-\\.]+,\\s*Deutschland)/i;\n  let match = text.match(fullAddressRegex);\n  if (match) {\n    return { address: match[1].trim() };\n  }\n\n  // Fallback: Adressen ohne \"Deutschland\"\n  const fallbackRegex = /([\\w\\s\\-\\.]+\\s*\\d{1,4}(?:\\/[a-zA-Z])?,\\s*\\d{5}\\s*[A-Za-z\\s\\-\\.]+)/i;\n  match = text.match(fallbackRegex);\n  if (match) {\n    return { address: match[1].trim() };\n  }\n\n  return { address: 'Unbekannt' };\n}\n\n// Textbereinigung und Extraktion\nconst rawText = minimalCleanHtml(htmlContent);\nconst phoneData = extractPhoneNumbersWithContext(rawText);\nconst Telefonnummer = phoneData.map(item => item.Telefonnummer);\nconst Kontext = phoneData.map(item => item.Kontext);\nconst Email = extractEmails(rawText);\nconst Adresse = extractLocation(rawText);\nconst Firmenname = extractCompanyName(htmlContent, website);\n\n// Rückgabe im n8n-Format\nreturn [{\n  json: {\n    Firmenname,\n    Webseite: website,\n    Telefonnummer,\n    Kontext,\n    Email\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        2960
      ],
      "id": "4853ded2-8e07-4e99-be1d-4bc18c833b22",
      "name": "Filter Home Page 2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "amount": 0.5
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        5080,
        3440
      ],
      "id": "05c3a9ab-8f61-4fa2-9170-d6076809a132",
      "name": "Wait",
      "webhookId": "a7d8281d-8cef-4118-9796-f9da60b7e417",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Get Missing Info').first().json }}",
        "options": {
          "systemMessage": "=You are tasked with extracting the \"{{ $('Set Search Query').first().json.query }}\" for \"{{ $('Set Company').first().json.company }}\", a company based in Germany, using the provided search results. Follow these steps:\n\nFocus on Relevant Sources: Prioritize the first search results or trusted sources explicitly referencing \"{{ $('Set Company').first().json.company }}\" in Germany.\n\nIf Query is \"Telefon\":\n\nLook for a phone number in the format +49 or 0 followed by digits (e.g., +499281546948800).\n\nIgnore numbers labeled as Fax, Telefax, or unrelated companies (e.g., from Czech Republic).\n\nIf Query is \"Email\":\n\nExtract a valid email address (e.g., 123@456.789).\nLook for \"@\" and check if it's a valid email. \n\nIgnore entries that are image-based (e.g., ending in .png, .jpg) or invalid (e.g., without an @).\n\nValidate: Ensure the extracted phone number or email truly belongs to \"{{ $('Set Company').first().json.company }}\". Disregard info clearly related to other entities.\n\nOutput:\n\nIf the query is \"Telefon\", return the phone number as a string.\n\nIf the query is \"Email\", return the email address as a string.\n\nIf nothing valid is found, return the string 'Not found'.\n\nName output as {{ $('Set Search Query').first().json.query }}\nOutput Example:\nTelefon: +49123456789\nor\nEmail: info@example.com"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2980,
        3680
      ],
      "id": "49613efc-56a0-4ced-8f4f-caf58afaa29b",
      "name": "Filter Missing Info",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Get inputs\nconst originalInput = $('Set Input').first()?.json?.agent_input || {};\nconst newData = $('Filter Missing Info').first()?.json?.output || '';\n\n// Parse original data if it's a stringified JSON\nlet originalData = {};\ntry {\n  originalData = typeof originalInput === 'string' ? JSON.parse(originalInput) : originalInput;\n} catch (e) {\n  throw new Error('Failed to parse original data: ' + e.message);\n}\n\n// Initialize merged data with original values\nconst mergedData = {\n  Firmenname: originalData.Firmenname || '',\n  Webseite: originalData.Webseite || '',\n  Telefonnummer: originalData.Telefonnummer || originalData.Telefon || [],\n  Kontext: originalData.Kontext || [],\n  Email: originalData.Email || [],\n  AgentOutput: originalData.AgentOutput || [] // Initialize AgentOutput array\n};\n\n// Append raw newData to AgentOutput if it exists and is not empty\nif (newData && typeof newData === 'string' && newData.trim() !== '') {\n  if (!mergedData.AgentOutput.includes(newData)) {\n    mergedData.AgentOutput.push(newData);\n  }\n}\n\n// Return merged data\nreturn [{ json: mergedData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1880,
        3680
      ],
      "id": "955c3f9e-9c4f-49e9-97e7-ef108f80e703",
      "name": "Add Data",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "475d76ca-99e7-45bb-a3ba-f5310e31f538",
              "leftValue": "={{ $('Filter Missing Info').first().json.output }}",
              "rightValue": "Not found",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3340,
        3680
      ],
      "id": "738ab20d-0741-4ac0-9c80-bffaa9174b6e",
      "name": "No Data Found",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2880,
        3740
      ],
      "id": "080265fb-e160-4ff8-9076-a8d8290b3004",
      "name": "GPT 4o-mini",
      "credentials": {
        "openAiApi": {
          "id": "c7rOayprscHnt5na",
          "name": "OpenAi account Main (Denny)"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c16e38f1-6fef-42b5-9ddd-043efdf0a7d1",
              "name": "company",
              "value": "={{ $('Sub Loop').item.json.websiteLink.replace(/^https?:\\/\\/(www\\.)?/, '').split('.')[0] }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2320,
        3680
      ],
      "id": "cd1a62fd-b120-4a82-b21e-e15d691a3402",
      "name": "Set Company",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "1704f50e-8511-497f-bbe2-1e819e1551dd",
              "leftValue": "={{ $('Set Loop').first()?.json?.loop && $('Set Loop').first()?.json?.loop !== \"\" ? $('Set Loop').first()?.json?.loop : \"\" }}\n",
              "rightValue": 2,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2960,
        3300
      ],
      "id": "ce5bdf14-4211-4c09-a24f-6eac8734d674",
      "name": "Check Loop",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c16e38f1-6fef-42b5-9ddd-043efdf0a7d1",
              "name": "loop",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        560,
        3860
      ],
      "id": "3b5ab74a-901b-4b5a-ba4c-a73a9baaa33a",
      "name": "Set Loop"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c16e38f1-6fef-42b5-9ddd-043efdf0a7d1",
              "name": "output",
              "value": "=2",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        340,
        3660
      ],
      "id": "0b738483-f510-4f98-92bb-75b9b7f433ff",
      "name": "Set Loop 2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c16e38f1-6fef-42b5-9ddd-043efdf0a7d1",
              "name": "output",
              "value": "=1",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -40,
        3660
      ],
      "id": "e7b32922-6030-40a8-bfb0-25d94b2b645b",
      "name": "Set Loop 1"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -400,
        3440
      ],
      "id": "55c203a4-b410-440a-b3dd-18a9d3e78d19",
      "name": "Sub Loop",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1980,
        3440
      ],
      "id": "79792e51-944a-412a-a5cd-9fe9702c6254",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsCode": "const blacklistKeywords = [\n  'tailwind', 'google', 'linkedin', 'facebook', 'youtube', 'x.com', 'schema.org',\n  'cloudfront', 'visable.com', 'amazonaws.com', 'w3.org', 'gtm', 'app.link',\n  'newsletter', 'api.visable.io', 'media.visable.com', 'amazon', 'mail.',\n  'static-assets.', 's3.eu-central-1.amazonaws.com', 'wlw'\n];\n\nconst inputLinks = items[0].json.websiteLinks;\n\nconst filteredLinks = inputLinks.filter(link => {\n  const normalized = link.toLowerCase();\n  const containsDot = normalized.includes('.');\n  const notBlacklisted = !blacklistKeywords.some(keyword => normalized.includes(keyword));\n  return containsDot && notBlacklisted;\n});\n\nreturn [\n  {\n    json: {\n      filteredWebsiteLinks: filteredLinks\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -860,
        3440
      ],
      "id": "db9bd352-0f24-4193-949e-ef0afc320a3f",
      "name": "Extract Valid Links",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Hole Input-String aus dem vorherigen Node (z. B. HTTP Request)\nconst html = $input.first().json.data || $('Get Data').first().json.body;\n\n// Funktion zum Extrahieren von Website-Links\nconst extractWebsiteLinks = (text) => {\n  const urlRegex = /https?:\\/\\/([\\w\\-\\.]+.[a-z]{2,})/g;\n  const links = new Set(); // Entfernt Duplikate\n\n  let match;\n  while ((match = urlRegex.exec(text)) !== null) {\n    links.add(match[1]); // Nur Domain (z. B. sereda.de)\n  }\n\n  return Array.from(links);\n};\n\n// Website-Links extrahieren\nconst websiteLinks = extractWebsiteLinks(html);\n\n// Debugging\nconsole.log('Extracted website links:', websiteLinks);\nconsole.log('Number of website links:', websiteLinks.length);\n\n// Rückgabe im n8n-Format\nreturn [{ json: { websiteLinks } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1080,
        3440
      ],
      "id": "e5671010-72d1-46d0-9f3f-acca5520e7e5",
      "name": "Clean HTML",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Hole Input-JSON\nconst input = $('Extract Valid Links').first().json.filteredWebsiteLinks || [];\n\n// Filtere und bereinige URLs (entferne Pfade, irrelevante Domains)\nconst excludeDomains = ['bme.de', 'visable.com', 'wlw.de'];\nconst cleanedLinks = input\n  .filter(url => {\n    // Entferne Pfade (z. B. /services)\n    const domain = url.replace(/\\/.*$/, '');\n    // Schließe irrelevante Domains aus\n    return domain && !excludeDomains.some(excluded => domain.includes(excluded));\n  })\n  .map(url => ({ json: { websiteLink: `https://${url.replace(/\\/.*$/, '')}` } }));\n\n// Rückgabe für Loop\nreturn cleanedLinks;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        3440
      ],
      "id": "6f62192d-6a3e-441a-b82a-604ee1d891b6",
      "name": "Split Into Items",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "={{ $json.websiteLink }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1300,
        3440
      ],
      "id": "0e0fccdf-15e2-458f-b654-7e5995c77393",
      "name": "Get Data",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0cd6d145-3194-4bc8-a50d-17a5759ad977",
              "name": "country",
              "value": "Deutschland",
              "type": "string"
            },
            {
              "id": "94e0d2ea-4152-43ac-a2b6-07a31cfe6559",
              "name": "websiteLink",
              "value": "={{ $json.websiteLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1760,
        3440
      ],
      "id": "aec2299e-daa5-491d-97be-77e021d5f711",
      "name": "Set Parameters",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst updatedItems = items.map(item => {\n  const originalData = item.json;\n  const updatedTelefonnummer = '\"' + originalData.Telefonnummer + '\"';\n  return {\n    json: {\n      ...originalData,\n      Telefonnummer: updatedTelefonnummer\n    }\n  };\n});\n\nreturn updatedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4320,
        3440
      ],
      "id": "36c64149-beca-41e3-9ac5-d19afa4feb38",
      "name": "Quote Number String",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "7c3812c4-05dd-410c-b233-8e1e61e349fa",
              "leftValue": "={{ $json.websiteLink }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "7aa0268c-d640-407d-85f5-7ec2137d074e",
              "leftValue": "={{ $json.websiteLink }}",
              "rightValue": "undefined",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "2affa2a9-251f-4056-a62d-a73607aa90e0",
              "leftValue": "={{ $json.websiteLink }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1540,
        3340
      ],
      "id": "95d6a1eb-09b5-4f6e-a57c-f0e8744fe076",
      "name": "If1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "f42bd676-5ce8-47e7-a33b-bf91139752a6",
              "leftValue": "={{ $('Set Input').first().json.agent_input }}",
              "rightValue": "undefined",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "2c49f248-673c-439a-b34b-9448321f067a",
              "leftValue": "={{ $('Set Input').first().json.agent_input }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            },
            {
              "id": "daea1ab0-3183-4cab-9be2-efe337f6c6f6",
              "leftValue": "={{ $('Set Input').first().json.agent_input }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "empty",
                "singleValue": true
              }
            },
            {
              "id": "f101df10-4438-4eb6-a1c6-ba1abc5a8825",
              "leftValue": "={{ $('Set Input').first().json.agent_input }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2440,
        3380
      ],
      "id": "a3f880da-fa2e-42a5-8ecd-c670424c91e8",
      "name": "If2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cdf3b473-0b3a-4df3-8f20-632ef6eea5ba",
              "name": "Output",
              "value": "Error",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1300,
        3200
      ],
      "id": "2298ff50-e49d-415c-b496-e6ca62157f5f",
      "name": "Error"
    }
  ],
  "pinData": {},
  "connections": {
    "Insert Contact Data": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Impressum": {
      "main": [
        [
          {
            "node": "Validate Impressum",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Impressum": {
      "main": [
        [
          {
            "node": "Get Contact Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filter Impressum",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Contact Page": {
      "main": [
        [
          {
            "node": "Validate Contact Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Contact Page": {
      "main": [
        [
          {
            "node": "Get Home Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filter Contact Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Home Page": {
      "main": [
        [
          {
            "node": "Validate Home Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Home Page": {
      "main": [
        [
          {
            "node": "Get Home Page 2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filter Home Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Home Page": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Filter Contact Page": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Set Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Input": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Contact Details": {
      "main": [
        [
          {
            "node": "Check Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Contact Details": {
      "main": [
        [
          {
            "node": "Format CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse CSV": {
      "main": [
        [
          {
            "node": "Quote Number String",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Format CSV": {
      "main": [
        [
          {
            "node": "Parse CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Format Contact Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Company",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Loop 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Search Query": {
      "main": [
        [
          {
            "node": "Get Missing Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Impressum": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Get Home Page 2": {
      "main": [
        [
          {
            "node": "Validate Home Page 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Home Page 2": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filter Home Page 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Home Page 2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Sub Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Missing Info": {
      "main": [
        [
          {
            "node": "Filter Missing Info",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Filter Missing Info": {
      "main": [
        [
          {
            "node": "No Data Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "No Data Found": {
      "main": [
        [
          {
            "node": "Format Contact Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT 4o-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Check Contact Details",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Format Contact Details",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Filter Missing Info",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Set Company": {
      "main": [
        [
          {
            "node": "Set Search Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Loop": {
      "main": [
        [
          {
            "node": "Format Contact Details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Loop 1": {
      "main": [
        [
          {
            "node": "Set Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Loop 2": {
      "main": [
        [
          {
            "node": "Set Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sub Loop": {
      "main": [
        [],
        [
          {
            "node": "Set Loop 1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Impressum",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Set Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Valid Links": {
      "main": [
        [
          {
            "node": "Split Into Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean HTML": {
      "main": [
        [
          {
            "node": "Extract Valid Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Data": {
      "main": [
        [
          {
            "node": "Clean HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Into Items": {
      "main": [
        [
          {
            "node": "Sub Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Parameters": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quote Number String": {
      "main": [
        [
          {
            "node": "Insert Contact Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Contact Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Berlin",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "74b617ab-4743-4ff5-9cf1-369e2670470b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ed4f3f37220443d82fec76dc79b331975281d2af5e70e3db9bcbd487ec78ae41"
  },
  "id": "TptrKt5WQhyqAxCE",
  "tags": []
}